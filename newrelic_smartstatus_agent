#! /usr/bin/env ruby

require "rubygems"
require "bundler/setup"

require "newrelic_plugin"

module SMARTStatusAgent

  class Agent < NewRelic::Plugin::Agent::Base

    agent_guid "com.erthad.smartstatus"
    agent_version "1.0.1"
    agent_config_options :hostname, :drives, :report_old_age
    agent_human_labels("S.M.A.R.T. status") { "S.M.A.R.T. status for #{hostname}" }

    def poll_cycle
      drives.each do |drive|
        smart_data(drive).each do |data|
          if report_old_age || data[:type] != :oldage
            report_metric format_metric_name(data), "Value", get_value(data)
          end
        end
      end
    end

  private

    ### FIXME: stub
    def smart_data(drive)
      [
        {
          :name => "Raw_Read_Error_Rate",
          :value => 100,
          :worst => 100,
          :threshold => 62,
          :raw_value => 0,
          :type => :prefail
        },
        {
          :name => "Start_Stop_Count",
          :value => 100,
          :worst => 100,
          :threshold => 0,
          :raw_value => 338,
          :type => :oldage
        },
      ]
    end

    def get_value(data)
      case data[:type]
      when :prefail then data[:value]
      when :oldage then data[:raw_value]
      else :data[:value]
      end
    end

    def format_metric_name(data)
      "#{hostname}/#{data[:name]}"
    end
  end

  #
  # Register this agent with the component.
  # The SMARTStatusAgent is the name of the module that defines this
  # driver (the module must contain at least three classes - a
  # PollCycle, a Metric and an Agent class, as defined above).
  #
  NewRelic::Plugin::Setup.install_agent :smartstatus, SMARTStatusAgent

  #
  # Launch the agent; this never returns.
  #
  NewRelic::Plugin::Run.setup_and_run

end
