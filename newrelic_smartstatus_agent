#! /usr/bin/env ruby

require "rubygems"
require "bundler/setup"

require "newrelic_plugin"
require "smart_status"

module SMARTStatusAgent

  class Agent < NewRelic::Plugin::Agent::Base

    DEFAULT_GUID = "com.erthad.smartstatus"

    agent_version "1.0.2"
    agent_config_options :plugin_guid, :hostname, :drives
    agent_human_labels("S.M.A.R.T. status") { hostname.to_s }

    def setup_metrics
      @guid = plugin_guid || DEFAULT_GUID
      @drive_processor = {}
      drives.each do |drive|
        @drive_processor[drive] = SMARTStatus::Parser.new(drive)
      end
    end

    def poll_cycle
      worst_value = 100
      drives.each do |drive|
        @drive_processor[drive].process.each do |metric,data|
          report_metric format_metric_name(drive, data.formatted_name, data.old_age?), data.unit, data.value
          if !data.old_age? && data.value < worst_value
            worst_value = data.value
          end
        end
      end
      report_metric "S.M.A.R.T/Max overall failure rate", "%", (100 - worst_value)
    end

  private

    def format_metric_name(drive, metric_name, old_age)
      drive = drive.gsub( /\/dev\//,'')
      type = old_age ? "Old age" : "Pre-fail"
      "S.M.A.R.T/#{type}/#{metric_name}/#{drive}"
    end
  end

  #
  # Register this agent with the component.
  # The SMARTStatusAgent is the name of the module that defines this
  # driver (the module must contain at least three classes - a
  # PollCycle, a Metric and an Agent class, as defined above).
  #
  NewRelic::Plugin::Setup.install_agent :smartstatus, SMARTStatusAgent

  #
  # Launch the agent; this never returns.
  #
  NewRelic::Plugin::Run.setup_and_run

end
